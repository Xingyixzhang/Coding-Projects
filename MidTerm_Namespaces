// https://docs.microsoft.com/en-us/dotnet/api/system?view=netframework-4.8
using System;
// https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic?view=netframework-4.8
using System.Collections.Generic;

namespace MidTerm
{
    class Program
    {
        static void Main(string[] args)
        {
            /* 
            Namespace #1: the System namespace contains fundamental classes and base classes that define commonly-used
                           value and reference data types, events, and event handlers, interfaces, attributes, and processing exceptions.
            */

            // Function #1: System.Math.Round(Double)/(Double, Int32)
            // Description: System.Math.Round provides can round an double to the
            //              nearest integer or specified fractional digits.
            double a = 34.798;
            double b = Math.Round(a);   // Rounds a to the nearest integer value.
            double c = Math.Round(a, 2);// Rounds a to a 2 fractional digits value.

            Console.WriteLine("Original Number: {0}, after rounding: {1}\n" +
                              "Round {2} to 2 fractional digits: {3}", a, b, a, c);

            // Function #2: System.Array.GetValue(Int32)
            // Description: Gets the value at the specified position in an array.
            //             The index is specified as a 32-bit integer.

            int[] myArray = new int[] { 1, 2, 3, 4, 5, 6 };    // Create a new array.
            Console.WriteLine(myArray.GetValue(3)); //This will print out 4, since 4 is at the 3rd index in myArray.

            // Function #3: System.Array.CopyTo(Array, Int32)
            // Description: Copies all elements of the current 1D array to the specified
            //              1D array starting at the speficied destination array index.

            try
            {
                int[] myArray1 = new int[] { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 };
                myArray.CopyTo(myArray1,1);
                Console.WriteLine(myArray1.GetValue(6)); // Instead of 7, this will 
                // print out 3, since myArray has replaced myArray1 starting from the 
                // number 9, which is the index of 1.
                // That means, the new myArray1 => 10,1,2,3,4,5,6,3,2,1.
            }
            catch (ArgumentNullException)
            {
                Console.WriteLine("The target array is null.");
            }
            catch (ArgumentOutOfRangeException)
            {
                Console.WriteLine("Index is less than the lower bound of target array.");
            }
            catch (ArgumentException)
            {
                Console.WriteLine("The target array is multi-dimensional.");
            // Or the number of elements in the source array is greater than the available
            // number of elements from index to the end of the destination array.
            }
            catch
            {
                Console.WriteLine("Error.");
            }

            // Function #4: System.Console.ReadKey()
            // Description: Obtains the next character of function key pressed by the user.
            //              one of the most common use of this method is to halt program execution until the user 
            //              presses a key and the app either terminates pr displays an additional 
            //              window of information.

            Console.WriteLine("Press <Enter> to exit the while loop.");
            while (Console.ReadKey().Key != ConsoleKey.Enter)
            {
                Console.WriteLine("\tWrong key, please press <Enter> to exit.");
            }

            // Function #5: System.Convert.ChangeType(Object, Type)
            // Description: Returns an object of the specified type and whose value is 
            //              equivalent to the specified onject.

            double x = -2.745;
            int y = (int)Convert.ChangeType(x, typeof(int));    // To the nearest integer.
            Console.WriteLine("The double value {0} when converted to an integer, " +
                              "becomes {1}", x, y);
            string s = "12/12/98";
            DateTime myDateAndTime = (DateTime)Convert.ChangeType(s, typeof(DateTime));
            Console.WriteLine("The string value {0} when converted to a Date " +
                              "becomes {1}", s, myDateAndTime);
